{"version":3,"file":"904.formio-qld.min.js","mappings":"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","sources":["webpack://FormioQld/./src/providers/address/PlsPlusAddressProvider.js","webpack://FormioQld/./src/providers/index.js","webpack://FormioQld/./src/providers/address/index.js"],"sourcesContent":["import _ from \"lodash\";\n\nconst CustomAddressProvider = Formio.Providers.providers.address.custom;\n\nconst defaultApiBase = \"https://www.address.services.qld.gov.au\";\n\nexport class PlsPlusAddressProvider extends CustomAddressProvider {\n  static get name() {\n    return \"plsPlus\";\n  }\n\n  static get displayName() {\n    return \"PLS Plus\";\n  }\n\n  get queryProperty() {\n    return \"query\";\n  }\n\n  get responseProperty() {\n    return \"AutoCompleteAddressResponse.AutoCompleteAddressResult.string\";\n  }\n\n  get displayValueProperty() {\n    return \"autocompleteAddress\";\n  }\n\n  getAddress1(addressLine) {\n    if (\n      addressLine.siteName &&\n      addressLine.complexDesc &&\n      addressLine.streetAddress\n    ) {\n      return addressLine.siteName;\n    }\n    if (\n      !addressLine.siteName &&\n      addressLine.complexDesc &&\n      addressLine.streetAddress\n    ) {\n      return addressLine.complexDesc;\n    }\n    if (\n      addressLine.siteName &&\n      !addressLine.complexDesc &&\n      addressLine.streetAddress\n    ) {\n      return addressLine.siteName;\n    }\n    if (\n      !addressLine.siteName &&\n      !addressLine.complexDesc &&\n      addressLine.streetAddress\n    ) {\n      return addressLine.streetAddress;\n    }\n    return \"\";\n  }\n\n  getAddress2(addressLine) {\n    if (\n      addressLine.siteName &&\n      addressLine.complexDesc &&\n      addressLine.streetAddress\n    ) {\n      return addressLine.complexDesc;\n    }\n    if (\n      !addressLine.siteName &&\n      addressLine.complexDesc &&\n      addressLine.streetAddress\n    ) {\n      return addressLine.streetAddress;\n    }\n    if (\n      addressLine.siteName &&\n      !addressLine.complexDesc &&\n      addressLine.streetAddress\n    ) {\n      return addressLine.streetAddress;\n    }\n    return \"\";\n  }\n\n  getAddress3(addressLine) {\n    if (\n      addressLine.siteName &&\n      addressLine.complexDesc &&\n      addressLine.streetAddress\n    ) {\n      return addressLine.streetAddress;\n    }\n    return \"\";\n  }\n\n  getCity(addressLine) {\n    return addressLine.Locality || \"\";\n  }\n\n  getState(addressLine) {\n    return addressLine.State || \"\";\n  }\n\n  getPostcode(addressLine) {\n    return addressLine.Postcode || \"\";\n  }\n\n  breakAddress(address) {\n    const siteName = address.SiteName || \"\";\n    const lot = address.Parcel?.Lot ? `LOT ${address.Parcel.Lot}` : undefined;\n    const complexDesc = [\n      lot,\n      address.Unit?.TypeCode,\n      address.Unit?.Number,\n      address.Level?.TypeCode,\n      address.Level?.Number,\n    ]\n      .filter((o) => o !== undefined)\n      .join(\" \");\n    const roadNumberPart = [\n      address.RoadNumber?.First,\n      address.RoadNumber?.Last ? \"-\" : undefined,\n      address.RoadNumber?.Last,\n    ]\n      .filter((o) => o !== undefined)\n      .join(\"\");\n    const streetAddress = [\n      roadNumberPart,\n      address.Road?.Name,\n      address.Road?.TypeCode,\n      address.Road?.Suffix,\n    ]\n      .filter((o) => o !== undefined)\n      .join(\" \");\n\n    const addressLine = {\n      siteName,\n      lot,\n      complexDesc,\n      roadNumberPart,\n      streetAddress,\n      Locality: address.Locality,\n      State: address.State,\n      Postcode: address.Postcode,\n    };\n\n    return {\n      address1: this.getAddress1(addressLine),\n      address2: this.getAddress2(addressLine),\n      address3: this.getAddress3(addressLine),\n      city: this.getCity(addressLine),\n      state: this.getState(addressLine),\n      postcode: this.getPostcode(addressLine),\n    };\n  }\n\n  makeParseRequest(options = {}) {\n    return Formio.makeStaticRequest(\n      this.getParseRequestUrl(options),\n      \"GET\",\n      null,\n      {\n        noToken: true,\n      }\n    );\n  }\n\n  parseAddress(query, options = {}) {\n    const requestOptions = this.getRequestOptions(options);\n    const params = requestOptions.params || {};\n    params[this.queryProperty] = query.trim();\n\n    return this.makeParseRequest(requestOptions).then((response) => {\n      const resultCount = parseFloat(\n        response.ParseAddressResponse.ParseAddressResult.ResultCount\n      );\n      if (resultCount === 0) return {};\n      if (resultCount === 1)\n        return response.ParseAddressResponse.ParseAddressResult.Results.Result\n          .Address;\n      return _.maxBy(\n        response.ParseAddressResponse.ParseAddressResult.Results.Result,\n        (r) => r.Confidence\n      ).Address;\n    });\n  }\n\n  search(query, options = {}) {\n    const requestOptions = this.getRequestOptions(options);\n    const params = requestOptions.params || {};\n    params[this.queryProperty] = query.trim();\n\n    return this.makeRequest(requestOptions).then((result) =>\n      this.responseProperty ? _.get(result, this.responseProperty, []) : result\n    );\n  }\n\n  getDisplayValue(address) {\n    return _.isEmpty(address)\n      ? \"\"\n      : _.get(address, this.displayValueProperty, \"\");\n  }\n\n  getRequestUrl(options = {}) {\n    const { params, apiBase } = options;\n    return `${\n      apiBase || defaultApiBase\n    }/pls-plus-qg/AutoCompleteAddress?${this.serialize(params)}`;\n  }\n\n  getParseRequestUrl(options = {}) {\n    const { params, apiBase } = options;\n    return `${\n      apiBase || defaultApiBase\n    }/pls-plus-qg/ParseAddress?${this.serialize(params)}`;\n  }\n}\n","import address from \"./address\";\n\nexport default { address };\n","import { PlsPlusAddressProvider } from \"./PlsPlusAddressProvider\";\n\nexport default {\n  [PlsPlusAddressProvider.name]: PlsPlusAddressProvider,\n};\n"],"names":["CustomAddressProvider","Formio","Providers","providers","address","custom","defaultApiBase","PlsPlusAddressProvider","addressLine","siteName","complexDesc","streetAddress","Locality","State","Postcode","SiteName","lot","Parcel","Lot","undefined","Unit","TypeCode","Number","Level","filter","o","join","roadNumberPart","RoadNumber","First","Last","Road","Name","Suffix","address1","this","getAddress1","address2","getAddress2","address3","getAddress3","city","getCity","state","getState","postcode","getPostcode","options","makeStaticRequest","getParseRequestUrl","noToken","query","requestOptions","getRequestOptions","params","queryProperty","trim","makeParseRequest","then","response","resultCount","parseFloat","ParseAddressResponse","ParseAddressResult","ResultCount","Results","Result","Address","_","r","Confidence","makeRequest","result","responseProperty","displayValueProperty","apiBase","serialize","name"],"sourceRoot":""}